{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17Evhhn5LC0RMyVrxdhqplz8RNGzpEc2a","timestamp":1716804602360}],"authorship_tag":"ABX9TyP5tfxM/5THmF6a5kpjd12p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"tqUM0X58SZSG"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.svm import SVC\n","from sklearn.linear_model import LogisticRegression, LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_curve, roc_auc_score, r2_score, mean_absolute_percentage_error\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import f1_score"]},{"cell_type":"code","source":["def iqr(my_array: np.array) -> tuple:\n","    Q1 = np.percentile(my_array, 25)\n","    Q3 = np.percentile(my_array, 75)\n","\n","    # Вычисляем межквартильный размах\n","    IQR = Q3 - Q1\n","\n","    # Определяем \"интервал доверия\"\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","    return lower_bound, upper_bound"],"metadata":{"id":"aSf8WI5Js-k7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import gdown\n","\n","# Идентификатор файла\n","file_id = '17gyvy7Jad8r32CJBxRvimBpUr2HbPg2B'\n","# Формируем URL для скачивания\n","url = f'https://drive.google.com/uc?id={file_id}'\n","\n","# Скачиваем файл\n","gdown.download(url, 'test.csv', quiet=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"iZrT_JTLTHBT","executionInfo":{"status":"ok","timestamp":1718634306616,"user_tz":-360,"elapsed":2269,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"7d40913a-d6ee-4f39-db8f-8ae7d9e70f63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://drive.google.com/uc?id=17gyvy7Jad8r32CJBxRvimBpUr2HbPg2B\n","To: /content/test.csv\n","100%|██████████| 82.6k/82.6k [00:00<00:00, 4.55MB/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["'test.csv'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# Создаем датафрейм\n","df = pd.read_csv('/content/test.csv')"],"metadata":{"id":"juL_P3n8TpJe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ZwKL0piwUTpB","executionInfo":{"status":"ok","timestamp":1718634307161,"user_tz":-360,"elapsed":553,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"ff5b25e9-ef87-4016-d020-63543b667545"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n","0            8.7             0.690         0.31             3.0      0.086   \n","1            6.1             0.210         0.40             1.4      0.066   \n","2           10.9             0.390         0.47             1.8      0.118   \n","3            8.8             0.685         0.26             1.6      0.088   \n","4            8.4             1.035         0.15             6.0      0.073   \n","\n","   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n","0                 23.0                  81.0  1.00020  3.48       0.74   \n","1                 40.5                 165.0  0.99120  3.25       0.59   \n","2                  6.0                  14.0  0.99820  3.30       0.75   \n","3                 16.0                  23.0  0.99694  3.32       0.47   \n","4                 11.0                  54.0  0.99900  3.37       0.49   \n","\n","   alcohol   quality  \n","0     11.6  6 points  \n","1     11.9  6 points  \n","2      9.8  6 points  \n","3      9.4  5 points  \n","4      9.9  5 points  "],"text/html":["\n","  <div id=\"df-ca220a3e-8706-4a43-b488-93eb7ccc679e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8.7</td>\n","      <td>0.690</td>\n","      <td>0.31</td>\n","      <td>3.0</td>\n","      <td>0.086</td>\n","      <td>23.0</td>\n","      <td>81.0</td>\n","      <td>1.00020</td>\n","      <td>3.48</td>\n","      <td>0.74</td>\n","      <td>11.6</td>\n","      <td>6 points</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.1</td>\n","      <td>0.210</td>\n","      <td>0.40</td>\n","      <td>1.4</td>\n","      <td>0.066</td>\n","      <td>40.5</td>\n","      <td>165.0</td>\n","      <td>0.99120</td>\n","      <td>3.25</td>\n","      <td>0.59</td>\n","      <td>11.9</td>\n","      <td>6 points</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10.9</td>\n","      <td>0.390</td>\n","      <td>0.47</td>\n","      <td>1.8</td>\n","      <td>0.118</td>\n","      <td>6.0</td>\n","      <td>14.0</td>\n","      <td>0.99820</td>\n","      <td>3.30</td>\n","      <td>0.75</td>\n","      <td>9.8</td>\n","      <td>6 points</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.8</td>\n","      <td>0.685</td>\n","      <td>0.26</td>\n","      <td>1.6</td>\n","      <td>0.088</td>\n","      <td>16.0</td>\n","      <td>23.0</td>\n","      <td>0.99694</td>\n","      <td>3.32</td>\n","      <td>0.47</td>\n","      <td>9.4</td>\n","      <td>5 points</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8.4</td>\n","      <td>1.035</td>\n","      <td>0.15</td>\n","      <td>6.0</td>\n","      <td>0.073</td>\n","      <td>11.0</td>\n","      <td>54.0</td>\n","      <td>0.99900</td>\n","      <td>3.37</td>\n","      <td>0.49</td>\n","      <td>9.9</td>\n","      <td>5 points</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca220a3e-8706-4a43-b488-93eb7ccc679e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca220a3e-8706-4a43-b488-93eb7ccc679e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca220a3e-8706-4a43-b488-93eb7ccc679e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8797faed-d424-4c99-b4a9-337ac6b42f98\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8797faed-d424-4c99-b4a9-337ac6b42f98')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8797faed-d424-4c99-b4a9-337ac6b42f98 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1279,\n  \"fields\": [\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7242430879783424,\n        \"min\": 4.6,\n        \"max\": 15.9,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          11.6,\n          7.4,\n          9.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17927524342606704,\n        \"min\": 0.12,\n        \"max\": 1.58,\n        \"num_unique_values\": 138,\n        \"samples\": [\n          0.9,\n          0.72,\n          0.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19544778779689795,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          0.1,\n          0.31,\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4357896544353426,\n        \"min\": 0.9,\n        \"max\": 15.5,\n        \"num_unique_values\": 82,\n        \"samples\": [\n          1.3,\n          3.0,\n          2.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04933241570977534,\n        \"min\": 0.012,\n        \"max\": 0.611,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          0.116,\n          0.092,\n          0.226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.313516811797305,\n        \"min\": 1.0,\n        \"max\": 68.0,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          23.0,\n          47.0,\n          21.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.94196195768851,\n        \"min\": 6.0,\n        \"max\": 289.0,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          115.0,\n          71.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0018559414475848696,\n        \"min\": 0.99007,\n        \"max\": 1.00369,\n        \"num_unique_values\": 386,\n        \"samples\": [\n          0.99764,\n          0.99408,\n          0.99596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15401567679643632,\n        \"min\": 2.74,\n        \"max\": 4.01,\n        \"num_unique_values\": 86,\n        \"samples\": [\n          3.9,\n          3.48,\n          3.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17460462669192456,\n        \"min\": 0.37,\n        \"max\": 2.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          0.83,\n          0.54,\n          0.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.052694266622637,\n        \"min\": 8.4,\n        \"max\": 14.9,\n        \"num_unique_values\": 60,\n        \"samples\": [\n          11.6,\n          10.7,\n          12.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"6 points\",\n          \"5 points\",\n          \"3 points\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dr3CuzVEUU35","executionInfo":{"status":"ok","timestamp":1718634307164,"user_tz":-360,"elapsed":554,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"1b47a740-1ca6-4a21-e547-fbd75eb244d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1279 entries, 0 to 1278\n","Data columns (total 12 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         1279 non-null   float64\n"," 1   volatile acidity      1279 non-null   float64\n"," 2   citric acid           1279 non-null   float64\n"," 3   residual sugar        1279 non-null   float64\n"," 4   chlorides             1279 non-null   float64\n"," 5   free sulfur dioxide   1279 non-null   float64\n"," 6   total sulfur dioxide  1279 non-null   float64\n"," 7   density               1279 non-null   float64\n"," 8   pH                    1279 non-null   float64\n"," 9   sulphates             1279 non-null   float64\n"," 10  alcohol               1279 non-null   float64\n"," 11  quality               1279 non-null   object \n","dtypes: float64(11), object(1)\n","memory usage: 120.0+ KB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OzzJbaBwUV8N","executionInfo":{"status":"ok","timestamp":1718634307164,"user_tz":-360,"elapsed":26,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"f7cc0001-ab84-4f4c-81b2-008c641f3c8d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["fixed acidity           0\n","volatile acidity        0\n","citric acid             0\n","residual sugar          0\n","chlorides               0\n","free sulfur dioxide     0\n","total sulfur dioxide    0\n","density                 0\n","pH                      0\n","sulphates               0\n","alcohol                 0\n","quality                 0\n","dtype: int64"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JUiLDXh-Ud_S","executionInfo":{"status":"ok","timestamp":1718634307165,"user_tz":-360,"elapsed":23,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"457bff54-313a-4b37-f9a7-8fba7866d3ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n","       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n","       'pH', 'sulphates', 'alcohol', 'quality'],\n","      dtype='object')"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["df = df.rename(columns={'fixed acidity': 'fixed_acidity', 'volatile acidity': 'volatile_acidity',\n","                        'citric acid': 'citric_acid', 'residual sugar': 'residual_sugar',\n","                        'free sulfur dioxide': 'free_sulfur_dioxide', 'total sulfur dioxide': 'total_sulfur_dioxide'})"],"metadata":{"id":"bUTRw6ahUsZK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"4G6Kns05V0Ju","executionInfo":{"status":"ok","timestamp":1718634307166,"user_tz":-360,"elapsed":21,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"2aaf43e0-d5e0-43d0-8c8a-7895cdf17f45"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       fixed_acidity  volatile_acidity  citric_acid  residual_sugar  \\\n","count    1279.000000       1279.000000  1279.000000     1279.000000   \n","mean        8.323690          0.530559     0.272471        2.555473   \n","std         1.724243          0.179275     0.195448        1.435790   \n","min         4.600000          0.120000     0.000000        0.900000   \n","25%         7.100000          0.400000     0.100000        1.900000   \n","50%         7.900000          0.520000     0.260000        2.200000   \n","75%         9.200000          0.640000     0.430000        2.600000   \n","max        15.900000          1.580000     1.000000       15.500000   \n","\n","         chlorides  free_sulfur_dioxide  total_sulfur_dioxide      density  \\\n","count  1279.000000          1279.000000           1279.000000  1279.000000   \n","mean      0.088448            15.876075             46.657154     0.996774   \n","std       0.049332            10.313517             32.941962     0.001856   \n","min       0.012000             1.000000              6.000000     0.990070   \n","25%       0.071000             7.000000             22.000000     0.995655   \n","50%       0.080000            14.000000             38.000000     0.996800   \n","75%       0.091000            21.000000             63.000000     0.997845   \n","max       0.611000            68.000000            289.000000     1.003690   \n","\n","                pH    sulphates      alcohol  \n","count  1279.000000  1279.000000  1279.000000  \n","mean      3.311650     0.660023    10.418100  \n","std       0.154016     0.174605     1.052694  \n","min       2.740000     0.370000     8.400000  \n","25%       3.210000     0.550000     9.500000  \n","50%       3.310000     0.620000    10.200000  \n","75%       3.400000     0.730000    11.100000  \n","max       4.010000     2.000000    14.900000  "],"text/html":["\n","  <div id=\"df-c15b495b-3f8c-4e40-8cfe-fc5a69aa2325\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed_acidity</th>\n","      <th>volatile_acidity</th>\n","      <th>citric_acid</th>\n","      <th>residual_sugar</th>\n","      <th>chlorides</th>\n","      <th>free_sulfur_dioxide</th>\n","      <th>total_sulfur_dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","      <td>1279.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>8.323690</td>\n","      <td>0.530559</td>\n","      <td>0.272471</td>\n","      <td>2.555473</td>\n","      <td>0.088448</td>\n","      <td>15.876075</td>\n","      <td>46.657154</td>\n","      <td>0.996774</td>\n","      <td>3.311650</td>\n","      <td>0.660023</td>\n","      <td>10.418100</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.724243</td>\n","      <td>0.179275</td>\n","      <td>0.195448</td>\n","      <td>1.435790</td>\n","      <td>0.049332</td>\n","      <td>10.313517</td>\n","      <td>32.941962</td>\n","      <td>0.001856</td>\n","      <td>0.154016</td>\n","      <td>0.174605</td>\n","      <td>1.052694</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.600000</td>\n","      <td>0.120000</td>\n","      <td>0.000000</td>\n","      <td>0.900000</td>\n","      <td>0.012000</td>\n","      <td>1.000000</td>\n","      <td>6.000000</td>\n","      <td>0.990070</td>\n","      <td>2.740000</td>\n","      <td>0.370000</td>\n","      <td>8.400000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>7.100000</td>\n","      <td>0.400000</td>\n","      <td>0.100000</td>\n","      <td>1.900000</td>\n","      <td>0.071000</td>\n","      <td>7.000000</td>\n","      <td>22.000000</td>\n","      <td>0.995655</td>\n","      <td>3.210000</td>\n","      <td>0.550000</td>\n","      <td>9.500000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>7.900000</td>\n","      <td>0.520000</td>\n","      <td>0.260000</td>\n","      <td>2.200000</td>\n","      <td>0.080000</td>\n","      <td>14.000000</td>\n","      <td>38.000000</td>\n","      <td>0.996800</td>\n","      <td>3.310000</td>\n","      <td>0.620000</td>\n","      <td>10.200000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>9.200000</td>\n","      <td>0.640000</td>\n","      <td>0.430000</td>\n","      <td>2.600000</td>\n","      <td>0.091000</td>\n","      <td>21.000000</td>\n","      <td>63.000000</td>\n","      <td>0.997845</td>\n","      <td>3.400000</td>\n","      <td>0.730000</td>\n","      <td>11.100000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>15.900000</td>\n","      <td>1.580000</td>\n","      <td>1.000000</td>\n","      <td>15.500000</td>\n","      <td>0.611000</td>\n","      <td>68.000000</td>\n","      <td>289.000000</td>\n","      <td>1.003690</td>\n","      <td>4.010000</td>\n","      <td>2.000000</td>\n","      <td>14.900000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c15b495b-3f8c-4e40-8cfe-fc5a69aa2325')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c15b495b-3f8c-4e40-8cfe-fc5a69aa2325 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c15b495b-3f8c-4e40-8cfe-fc5a69aa2325');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24edfa04-5f6e-4d20-b0f0-587830a1dbcd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24edfa04-5f6e-4d20-b0f0-587830a1dbcd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24edfa04-5f6e-4d20-b0f0-587830a1dbcd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"fixed_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 449.4479539360354,\n        \"min\": 1.7242430879783424,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.323690383111806,\n          7.9,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 451.99450296521337,\n        \"min\": 0.12,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5305590304925722,\n          0.52,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 452.08084663120115,\n        \"min\": 0.0,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.272470680218921,\n          0.26,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual_sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 450.8518229225509,\n        \"min\": 0.9,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.5554730258014073,\n          2.2,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 452.14417955018064,\n        \"min\": 0.012,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.08844800625488664,\n          0.08,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 445.74356791658096,\n        \"min\": 1.0,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.876075058639563,\n          14.0,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 436.5479863191233,\n        \"min\": 6.0,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          46.65715402658327,\n          38.0,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 451.89274923105074,\n        \"min\": 0.0018559414475848696,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9967739796716184,\n          0.9968,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 451.1792823898009,\n        \"min\": 0.15401567679643632,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.31164972634871,\n          3.31,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 451.93729587740546,\n        \"min\": 0.17460462669192456,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6600234558248631,\n          0.62,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.8997481698733,\n        \"min\": 1.052694266622637,\n        \"max\": 1279.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.418100078186082,\n          10.2,\n          1279.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":[],"metadata":{"id":"QpTu_nP8CA0R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def extract_numeric(value):\n","    try:\n","        # Extract the numeric part of the string\n","        numeric_value = ''.join(filter(str.isdigit, value))\n","        return int(numeric_value)\n","    except ValueError:\n","        # Return a default value or handle the error appropriately\n","        return None\n"],"metadata":{"id":"nx5TcdFCCAoi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['quality'] = df['quality'].map(extract_numeric)"],"metadata":{"id":"JUVhuni6CMFQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer, QuantileTransformer, PowerTransformer, RobustScaler"],"metadata":{"id":"Tx1cFAZzK7fP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.quality.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycOdyluLrafs","executionInfo":{"status":"ok","timestamp":1718634307168,"user_tz":-360,"elapsed":18,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"c31a4738-5a08-4fbb-a0fa-f53092f431f6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality\n","5    551\n","6    506\n","7    157\n","4     43\n","8     13\n","3      9\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":[],"metadata":{"id":"8RnB2NaeXWTW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дальше я начал создавать новые фичи"],"metadata":{"id":"a4eYRq6LKcfn"}},{"cell_type":"code","source":[],"metadata":{"id":"HvC7Cy4rD75A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.heatmap(df.corr()**2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":574},"id":"_chv3IVD1x20","executionInfo":{"status":"ok","timestamp":1718634309200,"user_tz":-360,"elapsed":2046,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"2050e106-279b-4b1d-cef7-7fc08fb8351e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":53},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.corr()**2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":445},"id":"imcfXv0n1xzk","executionInfo":{"status":"ok","timestamp":1718634309200,"user_tz":-360,"elapsed":25,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"5870fffb-417e-4a35-9f78-a2b6c31688f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      fixed_acidity  volatile_acidity  citric_acid  \\\n","fixed_acidity              1.000000          0.058822     0.447824   \n","volatile_acidity           0.058822          1.000000     0.297560   \n","citric_acid                0.447824          0.297560     1.000000   \n","residual_sugar             0.013495          0.000056     0.023286   \n","chlorides                  0.007754          0.004233     0.049203   \n","free_sulfur_dioxide        0.024050          0.000005     0.004607   \n","total_sulfur_dioxide       0.012449          0.006942     0.001171   \n","density                    0.436362          0.001039     0.135185   \n","pH                         0.457242          0.047482     0.291774   \n","sulphates                  0.029952          0.070800     0.099701   \n","alcohol                    0.003461          0.044207     0.011387   \n","quality                    0.015003          0.143165     0.046706   \n","\n","                      residual_sugar  chlorides  free_sulfur_dioxide  \\\n","fixed_acidity               0.013495   0.007754             0.024050   \n","volatile_acidity            0.000056   0.004233             0.000005   \n","citric_acid                 0.023286   0.049203             0.004607   \n","residual_sugar              1.000000   0.004032             0.028166   \n","chlorides                   0.004032   1.000000             0.000163   \n","free_sulfur_dioxide         0.028166   0.000163             1.000000   \n","total_sulfur_dioxide        0.026270   0.002156             0.446445   \n","density                     0.142414   0.034596             0.000449   \n","pH                          0.005809   0.072292             0.004445   \n","sulphates                   0.000083   0.145678             0.003837   \n","alcohol                     0.001784   0.045447             0.007036   \n","quality                     0.000029   0.016013             0.003120   \n","\n","                      total_sulfur_dioxide   density        pH  sulphates  \\\n","fixed_acidity                     0.012449  0.436362  0.457242   0.029952   \n","volatile_acidity                  0.006942  0.001039  0.047482   0.070800   \n","citric_acid                       0.001171  0.135185  0.291774   0.099701   \n","residual_sugar                    0.026270  0.142414  0.005809   0.000083   \n","chlorides                         0.002156  0.034596  0.072292   0.145678   \n","free_sulfur_dioxide               0.446445  0.000449  0.004445   0.003837   \n","total_sulfur_dioxide              1.000000  0.005659  0.004954   0.002506   \n","density                           0.005659  1.000000  0.110802   0.017815   \n","pH                                0.004954  0.110802  1.000000   0.044758   \n","sulphates                         0.002506  0.017815  0.044758   1.000000   \n","alcohol                           0.051563  0.230639  0.047177   0.009549   \n","quality                           0.040027  0.027919  0.002042   0.058853   \n","\n","                       alcohol   quality  \n","fixed_acidity         0.003461  0.015003  \n","volatile_acidity      0.044207  0.143165  \n","citric_acid           0.011387  0.046706  \n","residual_sugar        0.001784  0.000029  \n","chlorides             0.045447  0.016013  \n","free_sulfur_dioxide   0.007036  0.003120  \n","total_sulfur_dioxide  0.051563  0.040027  \n","density               0.230639  0.027919  \n","pH                    0.047177  0.002042  \n","sulphates             0.009549  0.058853  \n","alcohol               1.000000  0.223423  \n","quality               0.223423  1.000000  "],"text/html":["\n","  <div id=\"df-a43c85eb-6272-4993-9a5f-ed289ca7ee95\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed_acidity</th>\n","      <th>volatile_acidity</th>\n","      <th>citric_acid</th>\n","      <th>residual_sugar</th>\n","      <th>chlorides</th>\n","      <th>free_sulfur_dioxide</th>\n","      <th>total_sulfur_dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>fixed_acidity</th>\n","      <td>1.000000</td>\n","      <td>0.058822</td>\n","      <td>0.447824</td>\n","      <td>0.013495</td>\n","      <td>0.007754</td>\n","      <td>0.024050</td>\n","      <td>0.012449</td>\n","      <td>0.436362</td>\n","      <td>0.457242</td>\n","      <td>0.029952</td>\n","      <td>0.003461</td>\n","      <td>0.015003</td>\n","    </tr>\n","    <tr>\n","      <th>volatile_acidity</th>\n","      <td>0.058822</td>\n","      <td>1.000000</td>\n","      <td>0.297560</td>\n","      <td>0.000056</td>\n","      <td>0.004233</td>\n","      <td>0.000005</td>\n","      <td>0.006942</td>\n","      <td>0.001039</td>\n","      <td>0.047482</td>\n","      <td>0.070800</td>\n","      <td>0.044207</td>\n","      <td>0.143165</td>\n","    </tr>\n","    <tr>\n","      <th>citric_acid</th>\n","      <td>0.447824</td>\n","      <td>0.297560</td>\n","      <td>1.000000</td>\n","      <td>0.023286</td>\n","      <td>0.049203</td>\n","      <td>0.004607</td>\n","      <td>0.001171</td>\n","      <td>0.135185</td>\n","      <td>0.291774</td>\n","      <td>0.099701</td>\n","      <td>0.011387</td>\n","      <td>0.046706</td>\n","    </tr>\n","    <tr>\n","      <th>residual_sugar</th>\n","      <td>0.013495</td>\n","      <td>0.000056</td>\n","      <td>0.023286</td>\n","      <td>1.000000</td>\n","      <td>0.004032</td>\n","      <td>0.028166</td>\n","      <td>0.026270</td>\n","      <td>0.142414</td>\n","      <td>0.005809</td>\n","      <td>0.000083</td>\n","      <td>0.001784</td>\n","      <td>0.000029</td>\n","    </tr>\n","    <tr>\n","      <th>chlorides</th>\n","      <td>0.007754</td>\n","      <td>0.004233</td>\n","      <td>0.049203</td>\n","      <td>0.004032</td>\n","      <td>1.000000</td>\n","      <td>0.000163</td>\n","      <td>0.002156</td>\n","      <td>0.034596</td>\n","      <td>0.072292</td>\n","      <td>0.145678</td>\n","      <td>0.045447</td>\n","      <td>0.016013</td>\n","    </tr>\n","    <tr>\n","      <th>free_sulfur_dioxide</th>\n","      <td>0.024050</td>\n","      <td>0.000005</td>\n","      <td>0.004607</td>\n","      <td>0.028166</td>\n","      <td>0.000163</td>\n","      <td>1.000000</td>\n","      <td>0.446445</td>\n","      <td>0.000449</td>\n","      <td>0.004445</td>\n","      <td>0.003837</td>\n","      <td>0.007036</td>\n","      <td>0.003120</td>\n","    </tr>\n","    <tr>\n","      <th>total_sulfur_dioxide</th>\n","      <td>0.012449</td>\n","      <td>0.006942</td>\n","      <td>0.001171</td>\n","      <td>0.026270</td>\n","      <td>0.002156</td>\n","      <td>0.446445</td>\n","      <td>1.000000</td>\n","      <td>0.005659</td>\n","      <td>0.004954</td>\n","      <td>0.002506</td>\n","      <td>0.051563</td>\n","      <td>0.040027</td>\n","    </tr>\n","    <tr>\n","      <th>density</th>\n","      <td>0.436362</td>\n","      <td>0.001039</td>\n","      <td>0.135185</td>\n","      <td>0.142414</td>\n","      <td>0.034596</td>\n","      <td>0.000449</td>\n","      <td>0.005659</td>\n","      <td>1.000000</td>\n","      <td>0.110802</td>\n","      <td>0.017815</td>\n","      <td>0.230639</td>\n","      <td>0.027919</td>\n","    </tr>\n","    <tr>\n","      <th>pH</th>\n","      <td>0.457242</td>\n","      <td>0.047482</td>\n","      <td>0.291774</td>\n","      <td>0.005809</td>\n","      <td>0.072292</td>\n","      <td>0.004445</td>\n","      <td>0.004954</td>\n","      <td>0.110802</td>\n","      <td>1.000000</td>\n","      <td>0.044758</td>\n","      <td>0.047177</td>\n","      <td>0.002042</td>\n","    </tr>\n","    <tr>\n","      <th>sulphates</th>\n","      <td>0.029952</td>\n","      <td>0.070800</td>\n","      <td>0.099701</td>\n","      <td>0.000083</td>\n","      <td>0.145678</td>\n","      <td>0.003837</td>\n","      <td>0.002506</td>\n","      <td>0.017815</td>\n","      <td>0.044758</td>\n","      <td>1.000000</td>\n","      <td>0.009549</td>\n","      <td>0.058853</td>\n","    </tr>\n","    <tr>\n","      <th>alcohol</th>\n","      <td>0.003461</td>\n","      <td>0.044207</td>\n","      <td>0.011387</td>\n","      <td>0.001784</td>\n","      <td>0.045447</td>\n","      <td>0.007036</td>\n","      <td>0.051563</td>\n","      <td>0.230639</td>\n","      <td>0.047177</td>\n","      <td>0.009549</td>\n","      <td>1.000000</td>\n","      <td>0.223423</td>\n","    </tr>\n","    <tr>\n","      <th>quality</th>\n","      <td>0.015003</td>\n","      <td>0.143165</td>\n","      <td>0.046706</td>\n","      <td>0.000029</td>\n","      <td>0.016013</td>\n","      <td>0.003120</td>\n","      <td>0.040027</td>\n","      <td>0.027919</td>\n","      <td>0.002042</td>\n","      <td>0.058853</td>\n","      <td>0.223423</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a43c85eb-6272-4993-9a5f-ed289ca7ee95')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a43c85eb-6272-4993-9a5f-ed289ca7ee95 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a43c85eb-6272-4993-9a5f-ed289ca7ee95');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f02ee6b0-a7ae-42da-a768-50b52bb68fda\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f02ee6b0-a7ae-42da-a768-50b52bb68fda')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f02ee6b0-a7ae-42da-a768-50b52bb68fda button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"fixed_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3136426958956426,\n        \"min\": 0.0034606586401018657,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.0034606586401018657,\n          0.029951979182923694,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2841538479908489,\n        \"min\": 4.88734216639833e-06,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.04420668201794288,\n          0.07080011721887808,\n          0.05882201782689906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28988485799175806,\n        \"min\": 0.0011713024206113831,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.011386626721682057,\n          0.09970062203688386,\n          0.44782396999324603\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual_sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28496985385709384,\n        \"min\": 2.9431478489864382e-05,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.001784162942580708,\n          8.319656536213479e-05,\n          0.013494814518474516\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28178426202206125,\n        \"min\": 0.00016338783709768763,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.045447451808585344,\n          0.14567829990380768,\n          0.007754229836009576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.302666575731626,\n        \"min\": 4.88734216639833e-06,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.007036390169679472,\n          0.0038368103389962937,\n          0.024049676387927425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3001765106735621,\n        \"min\": 0.0011713024206113831,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.051562685334511145,\n          0.0025056359175206475,\n          0.012449272625403317\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28827174278686024,\n        \"min\": 0.00044917649327913767,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.2306390262022164,\n          0.017814656510820648,\n          0.43636203132108686\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2946013663842276,\n        \"min\": 0.0020416570841010544,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.0471767691938425,\n          0.04475764729539427,\n          0.4572424035553309\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27953910109642793,\n        \"min\": 8.319656536213479e-05,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.009549381617180667,\n          1.0,\n          0.029951979182923694\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28257127768993534,\n        \"min\": 0.001784162942580708,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1.0,\n          0.009549381617180667,\n          0.0034606586401018657\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2815341010084205,\n        \"min\": 2.9431478489864382e-05,\n        \"max\": 1.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.22342286653631524,\n          0.058853021536014065,\n          0.015003363174954107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["Полиномиальные фичи"],"metadata":{"id":"1tVxNDLPK9wQ"}},{"cell_type":"code","source":["from sklearn.preprocessing import PolynomialFeatures\n","# Полиномиальные признаки\n","\n","poly = PolynomialFeatures(degree=2, include_bias=False)\n","poly_features = poly.fit_transform(df[['fixed_acidity', 'volatile_acidity', 'citric_acid']])\n","poly_features_df = pd.DataFrame(poly_features, columns=poly.get_feature_names_out(poly.feature_names_in_)).drop(['fixed_acidity', 'volatile_acidity', 'citric_acid'], axis=1)\n","df = pd.concat([df, poly_features_df], axis=1)"],"metadata":{"id":"qyyZgSKn1xwN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.columns.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8m-uQt5pGcWX","executionInfo":{"status":"ok","timestamp":1718634309201,"user_tz":-360,"elapsed":22,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"e8a4aec6-ae82-4709-9979-4fe762fdd69b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(18,)"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["df['alcohol_bin'] = pd.cut(df['alcohol'], bins=6, labels=False)"],"metadata":{"id":"w93TgySM_cdo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.scatterplot(df.alcohol)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"-IKiBNoG_cay","executionInfo":{"status":"ok","timestamp":1718634310217,"user_tz":-360,"elapsed":1031,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"e4bbd4bc-e5ba-46bb-ba49-6697fd8d986e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='alcohol'>"]},"metadata":{},"execution_count":58},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.kdeplot(data=df, x='alcohol')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"4DL3TemZ_cVo","executionInfo":{"status":"ok","timestamp":1718634311178,"user_tz":-360,"elapsed":978,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"cb8bf3f8-713e-4e56-85f1-1e575833b81e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='alcohol', ylabel='Density'>"]},"metadata":{},"execution_count":59},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["points_3 = df[(df.quality == 3)|(df.quality == 4)|(df.quality == 8)]\n","df = df[~((df.quality == 3)|(df.quality == 4)|(df.quality == 8))]"],"metadata":{"id":"lfdZrO_R_cS3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['quality'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A-PzGlRjW0L0","executionInfo":{"status":"ok","timestamp":1718634311180,"user_tz":-360,"elapsed":25,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"ea724b76-e8ad-47b8-f51f-74ab1a602aae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality\n","5    551\n","6    506\n","7    157\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["points_3['quality'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OzCh_LLfW0JM","executionInfo":{"status":"ok","timestamp":1718634311180,"user_tz":-360,"elapsed":20,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"26b3771d-bf30-4d00-e8ca-41fbfe235a50"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality\n","4    43\n","8    13\n","3     9\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":62}]},{"cell_type":"markdown","source":["# Тут мы начинаем обучение"],"metadata":{"id":"x9rkDnLtPS2K"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import RobustScaler, PolynomialFeatures, StandardScaler, Normalizer, MinMaxScaler, QuantileTransformer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.metrics import accuracy_score, roc_auc_score, classification_report\n","from sklearn.metrics import precision_recall_curve, auc, f1_score, precision_score, recall_score, fbeta_score\n","from sklearn.ensemble import GradientBoostingClassifier"],"metadata":{"id":"sAPIUgTnQFpk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def test_scaler(X_train: pd.DataFrame, X_test: pd.DataFrame, y_train: pd.DataFrame, y_test: pd.DataFrame, model)-> dict:\n","  scaler_list = [RobustScaler(), StandardScaler(), Normalizer(), MinMaxScaler(), QuantileTransformer(output_distribution='uniform')]\n","  my_dict = {}\n","  for scaler in scaler_list:\n","      pipeline = make_pipeline(\n","          scaler,\n","          model\n","      )\n","      pipeline.fit(X_train, y_train)\n","      y_pred = pipeline.predict(X_test)\n","      accuracy = accuracy_score(y_test, y_pred)\n","      my_dict[f'{scaler.__class__.__name__}'] = accuracy\n","  # print(f'Best scaler: {min(my_dict, key=my_dict.get)}')\n","  return {min(my_dict, key=my_dict.get) : my_dict[f'{min(my_dict, key=my_dict.get)}']}\n"],"metadata":{"id":"QhhsJ3hjQHMo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df.drop(['quality'], axis=1)\n","y = df.quality\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","X_3 = points_3[points_3.quality == 3]\n","X_8 = points_3[points_3.quality == 8]\n","X_4 = points_3[(points_3.quality != 3)&(points_3.quality != 8)]\n","X_points_3 = X_4.drop(['quality'], axis=1)\n","y_points_3 = X_4.quality\n","\n","X_train_points, X_test_points, y_train_points, y_test_points = train_test_split(X_points_3, y_points_3, test_size=0.1, random_state=42)"],"metadata":{"id":"oYMmMSkXWs-M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PtfqOMGyeTfB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_38 = pd.concat([X_3[:-1], X_8[:-1]])\n","test_38 = pd.concat([X_3[-1:], X_8[-1:]])\n","X_train_points = pd.concat([X_train_points, train_38.drop(['quality'], axis=1)])\n","y_train_points = pd.concat([y_train_points, train_38.quality])\n","X_test_points = pd.concat([X_test_points, test_38.drop(['quality'], axis=1)])\n","y_test_points = pd.concat([y_test_points, test_38.quality])"],"metadata":{"id":"-eDtPVYbZ0pj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = pd.concat([X_train, X_train_points])\n","y_train = pd.concat([y_train, y_train_points])\n","X_test = pd.concat([X_test, X_test_points])\n","y_test = pd.concat([y_test, y_test_points])"],"metadata":{"id":"7h7IeLGwdOSw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YjUDi1YldOPM","executionInfo":{"status":"ok","timestamp":1718634311764,"user_tz":-360,"elapsed":11,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"8607618f-0256-44b3-8624-c278cf8c5ca2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality\n","5    116\n","6     96\n","7     31\n","4      5\n","3      1\n","8      1\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["At first I've tried LogisticRegression"],"metadata":{"id":"atK-PFUgTa1o"}},{"cell_type":"code","source":["penalty_list = ['l1', 'l2', 'elasticnet']\n","for penalty in penalty_list:\n","    if penalty == 'elasticnet':\n","        solver = 'saga'\n","        l1_ratio = 0.5  # or any other value between 0 and 1\n","    else:\n","        solver = 'liblinear'\n","        l1_ratio = None\n","    print(f\"{penalty}: {test_scaler(X_train, X_test, y_train, y_test, LogisticRegression(penalty=penalty, max_iter=1500, solver=solver, l1_ratio=l1_ratio, random_state=42))}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D2Zox65KRA1l","executionInfo":{"status":"ok","timestamp":1718634322844,"user_tz":-360,"elapsed":11089,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"476ab566-ae22-4895-dca1-cf2bd8ec4b03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["l1: {'Normalizer': 0.604}\n","l2: {'Normalizer': 0.544}\n","elasticnet: {'Normalizer': 0.56}\n"]}]},{"cell_type":"code","source":["criterion_list = ['gini', 'entropy', 'log_loss']\n","for criterion in criterion_list:\n","    print(f\"{criterion}: {test_scaler(X_train, X_test, y_train, y_test, DecisionTreeClassifier(random_state=42, criterion=criterion))}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8TiI2AP2Tlac","executionInfo":{"status":"ok","timestamp":1718634324092,"user_tz":-360,"elapsed":1260,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"cbfcb6ba-14a8-42b8-f299-b412b60b346d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["gini: {'QuantileTransformer': 0.588}\n","entropy: {'QuantileTransformer': 0.6}\n","log_loss: {'QuantileTransformer': 0.6}\n"]}]},{"cell_type":"code","source":["criterion_list = ['gini', 'entropy', 'log_loss']\n","for criterion in criterion_list:\n","    print(f\"{criterion}: {test_scaler(X_train, X_test, y_train, y_test, RandomForestClassifier(random_state=42, criterion=criterion, n_estimators=1000))}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m87psBaYU_wE","executionInfo":{"status":"ok","timestamp":1718634409680,"user_tz":-360,"elapsed":85592,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"44d69db4-80c1-4fb3-d67b-ef6ebc8c9cf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["gini: {'QuantileTransformer': 0.664}\n","entropy: {'StandardScaler': 0.656}\n","log_loss: {'StandardScaler': 0.656}\n"]}]},{"cell_type":"code","source":["criterion_list = ['friedman_mse', 'squared_error']\n","for criterion in criterion_list:\n","    print(f\"{criterion}: {test_scaler(X_train, X_test, y_train, y_test, GradientBoostingClassifier(random_state=42, criterion=criterion))}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OETAepNxdD9-","executionInfo":{"status":"ok","timestamp":1718634443563,"user_tz":-360,"elapsed":33909,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"82d4b293-2570-4f07-8427-079086b5549f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["friedman_mse: {'Normalizer': 0.632}\n","squared_error: {'Normalizer': 0.632}\n"]}]},{"cell_type":"code","source":["loss_list = ['log_loss', 'exponential']\n","for loss in loss_list:\n","    print(f\"{loss}: {test_scaler(X_train, X_test, y_train, y_test, GradientBoostingClassifier(random_state=42, loss=loss))}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"id":"SJWuHf1jeitZ","executionInfo":{"status":"error","timestamp":1718634460177,"user_tz":-360,"elapsed":16627,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"d5354566-8cfe-436e-cf82-18b48bd86d95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["log_loss: {'Normalizer': 0.632}\n"]},{"output_type":"error","ename":"ValueError","evalue":"ExponentialLoss requires 2 classes; got 6 class(es)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-73-c13e2df9c7c9>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mloss_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'log_loss'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'exponential'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mloss_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{loss}: {test_scaler(X_train, X_test, y_train, y_test, GradientBoostingClassifier(random_state=42, loss=loss))}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-64-d5e84cea256a>\u001b[0m in \u001b[0;36mtest_scaler\u001b[0;34m(X_train, X_test, y_train, y_test, model)\u001b[0m\n\u001b[1;32m      7\u001b[0m           \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m       )\n\u001b[0;32m----> 9\u001b[0;31m       \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m       \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m       \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    403\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"passthrough\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m                 \u001b[0mfit_params_last_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_params_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 405\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params_last_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    406\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    407\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    442\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 444\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    445\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_iter_no_change\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36m_check_params\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    299\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 301\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_classes_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    302\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"huber\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"quantile\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    303\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_gb_losses.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, n_classes)\u001b[0m\n\u001b[1;32m    889\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_classes\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    892\u001b[0m                 \"{0:s} requires 2 classes; got {1:d} class(es)\".format(\n\u001b[1;32m    893\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_classes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: ExponentialLoss requires 2 classes; got 6 class(es)"]}]},{"cell_type":"code","source":["!pip install catboost\n","!pip install scikit-learn\n","!pip install ipywidgets\n","!jupyter nbextension enable --py widgetsnbextension"],"metadata":{"id":"ZsVJP-sylmUj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from catboost import CatBoostClassifier, Pool, metrics, cv\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"PImplefY3izk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_scaler(X_train, X_test, y_train, y_test, CatBoostClassifier(custom_loss=[metrics.Accuracy()],random_seed=42,logging_level='Silent'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3zqd49vUmcOF","executionInfo":{"status":"ok","timestamp":1718635572343,"user_tz":-360,"elapsed":77091,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"648e8bcd-2288-475a-e6ed-19186425f5e4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Normalizer': 0.62}"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["model = make_pipeline(\n","    QuantileTransformer(),\n","    RandomForestClassifier(random_state=42, criterion='gini', n_estimators=1000))\n","# Обучение модели\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"id":"BSSwRWU1eKcw","executionInfo":{"status":"ok","timestamp":1718616177481,"user_tz":-360,"elapsed":5382,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"bfb7cc51-845f-4ded-dc23-da28d01393d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('quantiletransformer', QuantileTransformer()),\n","                ('randomforestclassifier',\n","                 RandomForestClassifier(n_estimators=1000, random_state=42))])"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;quantiletransformer&#x27;, QuantileTransformer()),\n","                (&#x27;randomforestclassifier&#x27;,\n","                 RandomForestClassifier(n_estimators=1000, random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;quantiletransformer&#x27;, QuantileTransformer()),\n","                (&#x27;randomforestclassifier&#x27;,\n","                 RandomForestClassifier(n_estimators=1000, random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">QuantileTransformer</label><div class=\"sk-toggleable__content\"><pre>QuantileTransformer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=1000, random_state=42)</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4_V4o7NweXVu","executionInfo":{"status":"ok","timestamp":1718616177871,"user_tz":-360,"elapsed":21,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"1eea30b6-afe2-40c3-929a-da2b806cd91f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.664"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# One-vs-Rest (OvR) подход для вычисления PR AUC и ROC AUC\n","y_pred_proba = model.predict_proba(X_test)\n","\n","# Вычисление PR AUC\n","pr_auc = roc_auc_score(y_test, y_pred_proba, average='macro', multi_class='ovr')\n","\n","# Вычисление ROC AUC\n","fpr, tpr, _ = roc_curve(y_test, y_pred_proba[:, 1], pos_label=1)\n","roc_auc = auc(fpr, tpr)\n","\n","# Вывод PR AUC и ROC AUC\n","print(\"\\nPR AUC:\", pr_auc)\n","print(\"ROC AUC:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S_2D0rIPgHjm","executionInfo":{"status":"ok","timestamp":1718616481454,"user_tz":-360,"elapsed":492,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"c59dc5a1-f059-41a7-b1ee-86c4afaf2e67"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","PR AUC: 0.8398568834685302\n","ROC AUC: nan\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py:1029: UndefinedMetricWarning: No positive samples in y_true, true positive value should be meaningless\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score, classification_report\n","from sklearn.metrics import precision_recall_curve, roc_auc_score, roc_curve, auc\n","\n","# Вычисление precision, recall и F1-score для каждого класса\n","precision_per_class = precision_score(y_test, y_pred, average=None)\n","recall_per_class = recall_score(y_test, y_pred, average=None)\n","f1_score_per_class = f1_score(y_test, y_pred, average=None)\n","\n","# Вычисление микроусредненных метрик\n","micro_precision = precision_score(y_test, y_pred, average='micro')\n","micro_recall = recall_score(y_test, y_pred, average='micro')\n","micro_f1_score = f1_score(y_test, y_pred, average='micro')\n","\n","# Вычисление макроусредненных метрик\n","macro_precision = precision_score(y_test, y_pred, average='macro')\n","macro_recall = recall_score(y_test, y_pred, average='macro')\n","macro_f1_score = f1_score(y_test, y_pred, average='macro')\n","\n","# Вычисление взвешенных метрик\n","weighted_precision = precision_score(y_test, y_pred, average='weighted')\n","weighted_recall = recall_score(y_test, y_pred, average='weighted')\n","weighted_f1_score = f1_score(y_test, y_pred, average='weighted')\n","\n","# Вывод результатов\n","print(\"Precision per class:\", precision_per_class)\n","print(\"Recall per class:\", recall_per_class)\n","print(\"F1-score per class:\", f1_score_per_class)\n","print(\"\\nMicro-average Precision:\", micro_precision)\n","print(\"Micro-average Recall:\", micro_recall)\n","print(\"Micro-average F1-score:\", micro_f1_score)\n","print(\"\\nMacro-average Precision:\", macro_precision)\n","print(\"Macro-average Recall:\", macro_recall)\n","print(\"Macro-average F1-score:\", macro_f1_score)\n","print(\"\\nWeighted-average Precision:\", weighted_precision)\n","print(\"Weighted-average Recall:\", weighted_recall)\n","print(\"Weighted-average F1-score:\", weighted_f1_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rDI-kjpAiDkN","executionInfo":{"status":"ok","timestamp":1718616607967,"user_tz":-360,"elapsed":415,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"8c8260a7-ab88-43ee-aecb-6fa70d5b5398"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision per class: [0.         0.         0.77586207 0.5826087  0.47368421 0.        ]\n","Recall per class: [0.         0.         0.77586207 0.69791667 0.29032258 0.        ]\n","F1-score per class: [0.         0.         0.77586207 0.63507109 0.36       0.        ]\n","\n","Micro-average Precision: 0.664\n","Micro-average Recall: 0.664\n","Micro-average F1-score: 0.664\n","\n","Macro-average Precision: 0.30535916252400114\n","Macro-average Recall: 0.29401688604622417\n","Macro-average F1-score: 0.29515552650215177\n","\n","Weighted-average Precision: 0.6424585812356979\n","Weighted-average Recall: 0.664\n","Weighted-average F1-score: 0.6485072985781991\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["confusion_matrix(y_test, y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-EWUCvEreXTG","executionInfo":{"status":"ok","timestamp":1718616737517,"user_tz":-360,"elapsed":373,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"d31f9209-d79a-4b68-dcc8-9944c758539f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  0,  0,  1,  0,  0],\n","       [ 0,  0,  4,  1,  0,  0],\n","       [ 0,  0, 90, 25,  1,  0],\n","       [ 0,  0, 20, 67,  9,  0],\n","       [ 0,  0,  2, 20,  9,  0],\n","       [ 0,  0,  0,  1,  0,  0]])"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import StandardScaler\n","\n","# Кросс-валидация\n","scores = cross_val_score(model, X_train, y_train, cv=5)  # 5-fold кросс-валидация\n","print(f'Средняя точность: {scores.mean():.2f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkrSDJjoZiUM","executionInfo":{"status":"ok","timestamp":1718616761768,"user_tz":-360,"elapsed":21355,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"5f0a6ef3-df39-4f4c-b42d-5fc447313401"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py:2627: UserWarning: n_quantiles (1000) is greater than the total number of samples (823). n_quantiles is set to n_samples.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py:2627: UserWarning: n_quantiles (1000) is greater than the total number of samples (823). n_quantiles is set to n_samples.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py:2627: UserWarning: n_quantiles (1000) is greater than the total number of samples (823). n_quantiles is set to n_samples.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py:2627: UserWarning: n_quantiles (1000) is greater than the total number of samples (823). n_quantiles is set to n_samples.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py:2627: UserWarning: n_quantiles (1000) is greater than the total number of samples (824). n_quantiles is set to n_samples.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Средняя точность: 0.66\n"]}]},{"cell_type":"code","source":["scores"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-BVVLHfbakXR","executionInfo":{"status":"ok","timestamp":1718616761768,"user_tz":-360,"elapsed":22,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"d036a726-efcf-4d90-f467-e30a0e69b271"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.66990291, 0.66504854, 0.63592233, 0.67961165, 0.67317073])"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["points_3 = df[(df.quality == 3)|(df.quality == 4)|(df.quality == 8)]\n","df = df[~((df.quality == 3)|(df.quality == 4)|(df.quality == 8))]\n","# df = pd.concat([df, points_3], ignore_index=True)"],"metadata":{"id":"E14VA7ICLi6D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"t2EJLiJza-10"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Идентификатор файла\n","file_id = '1ZvP_fu1THyJ9RialxGEosXd0ru5Wny5r'\n","# Формируем URL для скачивания\n","url = f'https://drive.google.com/uc?id={file_id}'\n","\n","# Скачиваем файл\n","gdown.download(url, 'train.csv', quiet=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"3bsFqG0PlJZW","executionInfo":{"status":"ok","timestamp":1718616839290,"user_tz":-360,"elapsed":1195,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"2fce089a-add5-443f-e8f4-8d6d1a212f7c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://drive.google.com/uc?id=1ZvP_fu1THyJ9RialxGEosXd0ru5Wny5r\n","To: /content/train.csv\n","100%|██████████| 19.0k/19.0k [00:00<00:00, 23.4MB/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["'train.csv'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["# Создаем датафрейм\n","dfv = pd.read_csv('/content/train.csv')\n","dfv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"x9PYXULZooZq","executionInfo":{"status":"ok","timestamp":1718616854478,"user_tz":-360,"elapsed":346,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"bb035045-516a-4655-e6ba-e2d6b5700b21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","0      1            7.7             0.560         0.08            2.50   \n","1      2            7.8             0.500         0.17            1.60   \n","2      3           10.7             0.670         0.22            2.70   \n","3      4            8.5             0.460         0.31            2.25   \n","4      5            6.7             0.460         0.24            1.70   \n","..   ...            ...               ...          ...             ...   \n","315  316            6.8             0.640         0.00            2.70   \n","316  317            6.6             0.630         0.00            4.30   \n","317  318            8.3             0.600         0.25            2.20   \n","318  319            8.8             0.270         0.39            2.00   \n","319  320            9.1             0.765         0.04            1.60   \n","\n","     chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","0        0.114                 14.0                  46.0  0.99710  3.24   \n","1        0.082                 21.0                 102.0  0.99600  3.39   \n","2        0.107                 17.0                  34.0  1.00040  3.28   \n","3        0.078                 32.0                  58.0  0.99800  3.33   \n","4        0.077                 18.0                  34.0  0.99480  3.39   \n","..         ...                  ...                   ...      ...   ...   \n","315      0.123                 15.0                  33.0  0.99538  3.44   \n","316      0.093                 51.0                  77.5  0.99558  3.20   \n","317      0.118                  9.0                  38.0  0.99616  3.15   \n","318      0.100                 20.0                  27.0  0.99546  3.15   \n","319      0.078                  4.0                  14.0  0.99800  3.29   \n","\n","     sulphates  alcohol  \n","0         0.66      9.6  \n","1         0.48      9.5  \n","2         0.98      9.9  \n","3         0.54      9.8  \n","4         0.60     10.6  \n","..         ...      ...  \n","315       0.63     11.3  \n","316       0.45      9.5  \n","317       0.53      9.8  \n","318       0.69     11.2  \n","319       0.54      9.7  \n","\n","[320 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-284bd7c6-b41d-4a0d-b649-fdf4efc95a29\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>7.7</td>\n","      <td>0.560</td>\n","      <td>0.08</td>\n","      <td>2.50</td>\n","      <td>0.114</td>\n","      <td>14.0</td>\n","      <td>46.0</td>\n","      <td>0.99710</td>\n","      <td>3.24</td>\n","      <td>0.66</td>\n","      <td>9.6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>7.8</td>\n","      <td>0.500</td>\n","      <td>0.17</td>\n","      <td>1.60</td>\n","      <td>0.082</td>\n","      <td>21.0</td>\n","      <td>102.0</td>\n","      <td>0.99600</td>\n","      <td>3.39</td>\n","      <td>0.48</td>\n","      <td>9.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10.7</td>\n","      <td>0.670</td>\n","      <td>0.22</td>\n","      <td>2.70</td>\n","      <td>0.107</td>\n","      <td>17.0</td>\n","      <td>34.0</td>\n","      <td>1.00040</td>\n","      <td>3.28</td>\n","      <td>0.98</td>\n","      <td>9.9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>8.5</td>\n","      <td>0.460</td>\n","      <td>0.31</td>\n","      <td>2.25</td>\n","      <td>0.078</td>\n","      <td>32.0</td>\n","      <td>58.0</td>\n","      <td>0.99800</td>\n","      <td>3.33</td>\n","      <td>0.54</td>\n","      <td>9.8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>6.7</td>\n","      <td>0.460</td>\n","      <td>0.24</td>\n","      <td>1.70</td>\n","      <td>0.077</td>\n","      <td>18.0</td>\n","      <td>34.0</td>\n","      <td>0.99480</td>\n","      <td>3.39</td>\n","      <td>0.60</td>\n","      <td>10.6</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>315</th>\n","      <td>316</td>\n","      <td>6.8</td>\n","      <td>0.640</td>\n","      <td>0.00</td>\n","      <td>2.70</td>\n","      <td>0.123</td>\n","      <td>15.0</td>\n","      <td>33.0</td>\n","      <td>0.99538</td>\n","      <td>3.44</td>\n","      <td>0.63</td>\n","      <td>11.3</td>\n","    </tr>\n","    <tr>\n","      <th>316</th>\n","      <td>317</td>\n","      <td>6.6</td>\n","      <td>0.630</td>\n","      <td>0.00</td>\n","      <td>4.30</td>\n","      <td>0.093</td>\n","      <td>51.0</td>\n","      <td>77.5</td>\n","      <td>0.99558</td>\n","      <td>3.20</td>\n","      <td>0.45</td>\n","      <td>9.5</td>\n","    </tr>\n","    <tr>\n","      <th>317</th>\n","      <td>318</td>\n","      <td>8.3</td>\n","      <td>0.600</td>\n","      <td>0.25</td>\n","      <td>2.20</td>\n","      <td>0.118</td>\n","      <td>9.0</td>\n","      <td>38.0</td>\n","      <td>0.99616</td>\n","      <td>3.15</td>\n","      <td>0.53</td>\n","      <td>9.8</td>\n","    </tr>\n","    <tr>\n","      <th>318</th>\n","      <td>319</td>\n","      <td>8.8</td>\n","      <td>0.270</td>\n","      <td>0.39</td>\n","      <td>2.00</td>\n","      <td>0.100</td>\n","      <td>20.0</td>\n","      <td>27.0</td>\n","      <td>0.99546</td>\n","      <td>3.15</td>\n","      <td>0.69</td>\n","      <td>11.2</td>\n","    </tr>\n","    <tr>\n","      <th>319</th>\n","      <td>320</td>\n","      <td>9.1</td>\n","      <td>0.765</td>\n","      <td>0.04</td>\n","      <td>1.60</td>\n","      <td>0.078</td>\n","      <td>4.0</td>\n","      <td>14.0</td>\n","      <td>0.99800</td>\n","      <td>3.29</td>\n","      <td>0.54</td>\n","      <td>9.7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>320 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-284bd7c6-b41d-4a0d-b649-fdf4efc95a29')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-284bd7c6-b41d-4a0d-b649-fdf4efc95a29 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-284bd7c6-b41d-4a0d-b649-fdf4efc95a29');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fe6c0758-761b-47d0-b453-a2317a9fcc8c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe6c0758-761b-47d0-b453-a2317a9fcc8c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fe6c0758-761b-47d0-b453-a2317a9fcc8c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5f00198f-36d8-4d7d-8a0c-6024dd2891dd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfv')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5f00198f-36d8-4d7d-8a0c-6024dd2891dd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dfv');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfv","summary":"{\n  \"name\": \"dfv\",\n  \"rows\": 320,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 1,\n        \"max\": 320,\n        \"num_unique_values\": 320,\n        \"samples\": [\n          168,\n          231,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fixed acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8095759030943028,\n        \"min\": 5.0,\n        \"max\": 15.5,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          6.7,\n          7.6,\n          8.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17805396138851895,\n        \"min\": 0.12,\n        \"max\": 1.115,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          0.715,\n          0.62,\n          0.735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19238154357216813,\n        \"min\": 0.0,\n        \"max\": 0.79,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          0.49,\n          0.08,\n          0.36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3014309326931386,\n        \"min\": 1.2,\n        \"max\": 13.4,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          3.4,\n          3.9,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03643129779801495,\n        \"min\": 0.039,\n        \"max\": 0.422,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          0.105,\n          0.114,\n          0.097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.043639280331245,\n        \"min\": 1.0,\n        \"max\": 72.0,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          54.0,\n          39.0,\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total sulfur dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.74866345923124,\n        \"min\": 7.0,\n        \"max\": 278.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          93.0,\n          75.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0020072477599312995,\n        \"min\": 0.9908,\n        \"max\": 1.00315,\n        \"num_unique_values\": 178,\n        \"samples\": [\n          0.99306,\n          0.99747,\n          1.001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15608413139607663,\n        \"min\": 2.86,\n        \"max\": 4.01,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          3.18,\n          3.3,\n          3.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1473928300691705,\n        \"min\": 0.33,\n        \"max\": 1.36,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          0.65,\n          0.73,\n          0.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.117510948941054,\n        \"min\": 8.4,\n        \"max\": 14.0,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          9.1,\n          11.6,\n          12.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["dfv = dfv.rename(columns={'fixed acidity': 'fixed_acidity', 'volatile acidity': 'volatile_acidity',\n","                        'citric acid': 'citric_acid', 'residual sugar': 'residual_sugar',\n","                        'free sulfur dioxide': 'free_sulfur_dioxide', 'total sulfur dioxide': 'total_sulfur_dioxide'})"],"metadata":{"id":"b8dsWikioqz4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Полиномиальные признаки\n","poly = PolynomialFeatures(degree=2, include_bias=False)\n","poly_featuresv = poly.fit_transform(dfv[['fixed_acidity', 'volatile_acidity', 'citric_acid']])\n","poly_features_dfv = pd.DataFrame(poly_featuresv, columns=poly.get_feature_names_out(poly.feature_names_in_)).drop(['fixed_acidity', 'volatile_acidity', 'citric_acid'], axis=1)\n","poly_features_dfv\n","dfv = pd.concat([dfv, poly_features_dfv], axis=1)"],"metadata":{"id":"mGwX7SV_DuVt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfv['alcohol_bin'] = pd.cut(dfv['alcohol'], bins=6, labels=False)"],"metadata":{"id":"Z__RO35GSLn3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfv"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"_MztlEm6E4aA","executionInfo":{"status":"ok","timestamp":1718543718348,"user_tz":-360,"elapsed":545,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"840ddbf3-689d-49d9-ffb8-1eed6783b96d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  fixed_acidity  volatile_acidity  citric_acid  residual_sugar  \\\n","0      1            7.7             0.560         0.08            2.50   \n","1      2            7.8             0.500         0.17            1.60   \n","2      3           10.7             0.670         0.22            2.70   \n","3      4            8.5             0.460         0.31            2.25   \n","4      5            6.7             0.460         0.24            1.70   \n","..   ...            ...               ...          ...             ...   \n","315  316            6.8             0.640         0.00            2.70   \n","316  317            6.6             0.630         0.00            4.30   \n","317  318            8.3             0.600         0.25            2.20   \n","318  319            8.8             0.270         0.39            2.00   \n","319  320            9.1             0.765         0.04            1.60   \n","\n","     chlorides  free_sulfur_dioxide  total_sulfur_dioxide  density    pH  \\\n","0        0.114                 14.0                  46.0  0.99710  3.24   \n","1        0.082                 21.0                 102.0  0.99600  3.39   \n","2        0.107                 17.0                  34.0  1.00040  3.28   \n","3        0.078                 32.0                  58.0  0.99800  3.33   \n","4        0.077                 18.0                  34.0  0.99480  3.39   \n","..         ...                  ...                   ...      ...   ...   \n","315      0.123                 15.0                  33.0  0.99538  3.44   \n","316      0.093                 51.0                  77.5  0.99558  3.20   \n","317      0.118                  9.0                  38.0  0.99616  3.15   \n","318      0.100                 20.0                  27.0  0.99546  3.15   \n","319      0.078                  4.0                  14.0  0.99800  3.29   \n","\n","     sulphates  alcohol  fixed_acidity^2  fixed_acidity volatile_acidity  \\\n","0         0.66      9.6            59.29                          4.3120   \n","1         0.48      9.5            60.84                          3.9000   \n","2         0.98      9.9           114.49                          7.1690   \n","3         0.54      9.8            72.25                          3.9100   \n","4         0.60     10.6            44.89                          3.0820   \n","..         ...      ...              ...                             ...   \n","315       0.63     11.3            46.24                          4.3520   \n","316       0.45      9.5            43.56                          4.1580   \n","317       0.53      9.8            68.89                          4.9800   \n","318       0.69     11.2            77.44                          2.3760   \n","319       0.54      9.7            82.81                          6.9615   \n","\n","     fixed_acidity citric_acid  volatile_acidity^2  \\\n","0                        0.616            0.313600   \n","1                        1.326            0.250000   \n","2                        2.354            0.448900   \n","3                        2.635            0.211600   \n","4                        1.608            0.211600   \n","..                         ...                 ...   \n","315                      0.000            0.409600   \n","316                      0.000            0.396900   \n","317                      2.075            0.360000   \n","318                      3.432            0.072900   \n","319                      0.364            0.585225   \n","\n","     volatile_acidity citric_acid  citric_acid^2  alcohol_bin  \n","0                          0.0448         0.0064            1  \n","1                          0.0850         0.0289            1  \n","2                          0.1474         0.0484            1  \n","3                          0.1426         0.0961            1  \n","4                          0.1104         0.0576            2  \n","..                            ...            ...          ...  \n","315                        0.0000         0.0000            3  \n","316                        0.0000         0.0000            1  \n","317                        0.1500         0.0625            1  \n","318                        0.1053         0.1521            2  \n","319                        0.0306         0.0016            1  \n","\n","[320 rows x 19 columns]"],"text/html":["\n","  <div id=\"df-ebfc35a3-6fa0-4517-8fc5-f5d38cb19d21\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>fixed_acidity</th>\n","      <th>volatile_acidity</th>\n","      <th>citric_acid</th>\n","      <th>residual_sugar</th>\n","      <th>chlorides</th>\n","      <th>free_sulfur_dioxide</th>\n","      <th>total_sulfur_dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>fixed_acidity^2</th>\n","      <th>fixed_acidity volatile_acidity</th>\n","      <th>fixed_acidity citric_acid</th>\n","      <th>volatile_acidity^2</th>\n","      <th>volatile_acidity citric_acid</th>\n","      <th>citric_acid^2</th>\n","      <th>alcohol_bin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>7.7</td>\n","      <td>0.560</td>\n","      <td>0.08</td>\n","      <td>2.50</td>\n","      <td>0.114</td>\n","      <td>14.0</td>\n","      <td>46.0</td>\n","      <td>0.99710</td>\n","      <td>3.24</td>\n","      <td>0.66</td>\n","      <td>9.6</td>\n","      <td>59.29</td>\n","      <td>4.3120</td>\n","      <td>0.616</td>\n","      <td>0.313600</td>\n","      <td>0.0448</td>\n","      <td>0.0064</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>7.8</td>\n","      <td>0.500</td>\n","      <td>0.17</td>\n","      <td>1.60</td>\n","      <td>0.082</td>\n","      <td>21.0</td>\n","      <td>102.0</td>\n","      <td>0.99600</td>\n","      <td>3.39</td>\n","      <td>0.48</td>\n","      <td>9.5</td>\n","      <td>60.84</td>\n","      <td>3.9000</td>\n","      <td>1.326</td>\n","      <td>0.250000</td>\n","      <td>0.0850</td>\n","      <td>0.0289</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>10.7</td>\n","      <td>0.670</td>\n","      <td>0.22</td>\n","      <td>2.70</td>\n","      <td>0.107</td>\n","      <td>17.0</td>\n","      <td>34.0</td>\n","      <td>1.00040</td>\n","      <td>3.28</td>\n","      <td>0.98</td>\n","      <td>9.9</td>\n","      <td>114.49</td>\n","      <td>7.1690</td>\n","      <td>2.354</td>\n","      <td>0.448900</td>\n","      <td>0.1474</td>\n","      <td>0.0484</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>8.5</td>\n","      <td>0.460</td>\n","      <td>0.31</td>\n","      <td>2.25</td>\n","      <td>0.078</td>\n","      <td>32.0</td>\n","      <td>58.0</td>\n","      <td>0.99800</td>\n","      <td>3.33</td>\n","      <td>0.54</td>\n","      <td>9.8</td>\n","      <td>72.25</td>\n","      <td>3.9100</td>\n","      <td>2.635</td>\n","      <td>0.211600</td>\n","      <td>0.1426</td>\n","      <td>0.0961</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>6.7</td>\n","      <td>0.460</td>\n","      <td>0.24</td>\n","      <td>1.70</td>\n","      <td>0.077</td>\n","      <td>18.0</td>\n","      <td>34.0</td>\n","      <td>0.99480</td>\n","      <td>3.39</td>\n","      <td>0.60</td>\n","      <td>10.6</td>\n","      <td>44.89</td>\n","      <td>3.0820</td>\n","      <td>1.608</td>\n","      <td>0.211600</td>\n","      <td>0.1104</td>\n","      <td>0.0576</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>315</th>\n","      <td>316</td>\n","      <td>6.8</td>\n","      <td>0.640</td>\n","      <td>0.00</td>\n","      <td>2.70</td>\n","      <td>0.123</td>\n","      <td>15.0</td>\n","      <td>33.0</td>\n","      <td>0.99538</td>\n","      <td>3.44</td>\n","      <td>0.63</td>\n","      <td>11.3</td>\n","      <td>46.24</td>\n","      <td>4.3520</td>\n","      <td>0.000</td>\n","      <td>0.409600</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>316</th>\n","      <td>317</td>\n","      <td>6.6</td>\n","      <td>0.630</td>\n","      <td>0.00</td>\n","      <td>4.30</td>\n","      <td>0.093</td>\n","      <td>51.0</td>\n","      <td>77.5</td>\n","      <td>0.99558</td>\n","      <td>3.20</td>\n","      <td>0.45</td>\n","      <td>9.5</td>\n","      <td>43.56</td>\n","      <td>4.1580</td>\n","      <td>0.000</td>\n","      <td>0.396900</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>317</th>\n","      <td>318</td>\n","      <td>8.3</td>\n","      <td>0.600</td>\n","      <td>0.25</td>\n","      <td>2.20</td>\n","      <td>0.118</td>\n","      <td>9.0</td>\n","      <td>38.0</td>\n","      <td>0.99616</td>\n","      <td>3.15</td>\n","      <td>0.53</td>\n","      <td>9.8</td>\n","      <td>68.89</td>\n","      <td>4.9800</td>\n","      <td>2.075</td>\n","      <td>0.360000</td>\n","      <td>0.1500</td>\n","      <td>0.0625</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>318</th>\n","      <td>319</td>\n","      <td>8.8</td>\n","      <td>0.270</td>\n","      <td>0.39</td>\n","      <td>2.00</td>\n","      <td>0.100</td>\n","      <td>20.0</td>\n","      <td>27.0</td>\n","      <td>0.99546</td>\n","      <td>3.15</td>\n","      <td>0.69</td>\n","      <td>11.2</td>\n","      <td>77.44</td>\n","      <td>2.3760</td>\n","      <td>3.432</td>\n","      <td>0.072900</td>\n","      <td>0.1053</td>\n","      <td>0.1521</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>319</th>\n","      <td>320</td>\n","      <td>9.1</td>\n","      <td>0.765</td>\n","      <td>0.04</td>\n","      <td>1.60</td>\n","      <td>0.078</td>\n","      <td>4.0</td>\n","      <td>14.0</td>\n","      <td>0.99800</td>\n","      <td>3.29</td>\n","      <td>0.54</td>\n","      <td>9.7</td>\n","      <td>82.81</td>\n","      <td>6.9615</td>\n","      <td>0.364</td>\n","      <td>0.585225</td>\n","      <td>0.0306</td>\n","      <td>0.0016</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>320 rows × 19 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebfc35a3-6fa0-4517-8fc5-f5d38cb19d21')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ebfc35a3-6fa0-4517-8fc5-f5d38cb19d21 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ebfc35a3-6fa0-4517-8fc5-f5d38cb19d21');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f3db421c-9fcf-4e9f-8686-db7e59b8840f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3db421c-9fcf-4e9f-8686-db7e59b8840f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f3db421c-9fcf-4e9f-8686-db7e59b8840f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1085c3d3-4ab6-4e99-9c97-9fbd73c06f17\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfv')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1085c3d3-4ab6-4e99-9c97-9fbd73c06f17 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dfv');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfv","summary":"{\n  \"name\": \"dfv\",\n  \"rows\": 320,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 1,\n        \"max\": 320,\n        \"num_unique_values\": 320,\n        \"samples\": [\n          168,\n          231,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fixed_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8095759030943028,\n        \"min\": 5.0,\n        \"max\": 15.5,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          6.7,\n          7.6,\n          8.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17805396138851895,\n        \"min\": 0.12,\n        \"max\": 1.115,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          0.715,\n          0.62,\n          0.735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19238154357216813,\n        \"min\": 0.0,\n        \"max\": 0.79,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          0.49,\n          0.08,\n          0.36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"residual_sugar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3014309326931386,\n        \"min\": 1.2,\n        \"max\": 13.4,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          3.4,\n          3.9,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chlorides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03643129779801495,\n        \"min\": 0.039,\n        \"max\": 0.422,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          0.105,\n          0.114,\n          0.097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"free_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.043639280331245,\n        \"min\": 1.0,\n        \"max\": 72.0,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          54.0,\n          39.0,\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_sulfur_dioxide\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.74866345923124,\n        \"min\": 7.0,\n        \"max\": 278.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          93.0,\n          75.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0020072477599312995,\n        \"min\": 0.9908,\n        \"max\": 1.00315,\n        \"num_unique_values\": 178,\n        \"samples\": [\n          0.99306,\n          0.99747,\n          1.001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15608413139607663,\n        \"min\": 2.86,\n        \"max\": 4.01,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          3.18,\n          3.3,\n          3.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sulphates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1473928300691705,\n        \"min\": 0.33,\n        \"max\": 1.36,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          0.65,\n          0.73,\n          0.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.117510948941054,\n        \"min\": 8.4,\n        \"max\": 14.0,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          9.1,\n          11.6,\n          12.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fixed_acidity^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33.81013799042563,\n        \"min\": 25.0,\n        \"max\": 240.25,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          44.89,\n          57.76,\n          79.21000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fixed_acidity volatile_acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.457383116986307,\n        \"min\": 1.068,\n        \"max\": 9.9975,\n        \"num_unique_values\": 281,\n        \"samples\": [\n          6.834,\n          5.6000000000000005,\n          4.958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fixed_acidity citric_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.143433615767879,\n        \"min\": 0.0,\n        \"max\": 10.665000000000001,\n        \"num_unique_values\": 260,\n        \"samples\": [\n          1.525,\n          2.336,\n          1.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile_acidity^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2005773331101433,\n        \"min\": 0.0144,\n        \"max\": 1.243225,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          0.5112249999999999,\n          0.3844,\n          0.540225\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatile_acidity citric_acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08738300572666637,\n        \"min\": 0.0,\n        \"max\": 0.6666000000000001,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          0.4187,\n          0.14040000000000002,\n          0.02\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"citric_acid^2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12048904933397221,\n        \"min\": 0.0,\n        \"max\": 0.6241000000000001,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          0.24009999999999998,\n          0.0064,\n          0.1296\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alcohol_bin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["dfv.drop(['id'], axis=1).columns.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6puWqxReoihr","executionInfo":{"status":"ok","timestamp":1718616869403,"user_tz":-360,"elapsed":346,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"57debd56-987c-4bcd-980b-2d4f2a3f64de"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(18,)"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["X.columns.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXHJKBHWMIjq","executionInfo":{"status":"ok","timestamp":1718616870630,"user_tz":-360,"elapsed":13,"user":{"displayName":"Bekten Kojonov","userId":"04530513514326551728"}},"outputId":"31127032-b967-4aa2-c93c-6b1c3c7456a0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(18,)"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":[],"metadata":{"id":"D4zZJ3KTpHDV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Начинаем предсказание"],"metadata":{"id":"zheLR1zvbnpj"}},{"cell_type":"code","source":["x = dfv.drop(['id'], axis=1)"],"metadata":{"id":"d7oaEzWykU5g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred = model.predict(x)"],"metadata":{"id":"FZ7Aw70YFI6T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Создаем DataFrame с id и метками качества\n","y_df = pd.DataFrame({\n","    'id': range(1, len(y_pred)+1),\n","    'quality': [f'{label} points' for label in y_pred]\n","})\n","\n","# Сохраняем DataFrame в CSV-файл\n","y_df.to_csv('/content/Predict.csv', index=False)"],"metadata":{"id":"9B5CeSXRqGYD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BmNKmpmwrErP"},"execution_count":null,"outputs":[]}]}